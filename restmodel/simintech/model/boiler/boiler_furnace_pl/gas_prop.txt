// Свойства газов

// Функции для расчета свйоств дымовых газов
// Состав дымовых газов: кислород (O2), диоксид углерода (CO2), вода (H2O), азот (N2), аргон (Ar), диоксид серы (SO2) 

// Функция для расчета энтальпии дымовых газов - exh_gas_h_T(T, X)
// энтальпия - [Дж/кг]
// здесь Т - температура дымовых газов [К]
// X - массив массовых долей компонентов в смеси

// Функция для расчета температуры дымовых газов методом секущей - exh_gas_h_T_newt(h, X, T0)
// температура - [К]
// здесь h - энтальпия дымовых газов [Дж/кг]
// X - массив массовых долей компонентов в смеси
// T0 - первое приближение для температуры дымовых газов

// Функция для расчета плотности дымовых газов - exh_gas_d_pT(p, T, X)
// плотность - [кг/м3]
// здесь p - давление [Па]
// T - температура [K]
// X - массив массовых долей компонентов в смеси

// Функция для расчета динамической вязкости дымовых газов - dynamicViscosity(T, X)
// динамическая вязкость - [Па*с]
// T - температура [K]
// X - массив массовых долей компонентов в смеси

// Функция для расчета теплоемкости дымовых газов - exh_gas_cp_T(T, X)
// теплоемкость - [Дж/кг/К]
// T - температура [K]
// X - массив массовых долей компонентов в смеси

// Функция для расчета теплопроводности - thermalConductivity(T, X, method)
// теплопроводность - [Вт/м/К]
// T - температура [K]
// X - массив массовых долей компонентов в смеси
// method - метод расчета
//     1 - формула Ойкена
//     2 - модифицированная формула Ойкена


// Константы для расчеты свойств азота (N2)
const N2_MM = 0.0280134,
      N2_Hf = 0,
      N2_H0 = 309498.4543111511,
      N2_Tlimit = 1000,
      N2_alow = [22103.71497,-381.846182,6.08273836,-0.00853091441,1.384646189e-005,-9.62579362e-009,2.519705809e-012],
      N2_blow = [710.846086,-10.76003744],
      N2_ahigh = [587712.406,-2239.249073,6.06694922,-0.00061396855,1.491806679e-007,-1.923105485e-011,1.061954386e-015],
      N2_bhigh = [12832.10415,-15.86640027],
      N2_R = 296.8033869505308,

			N2_casRegistryNumber = "7727-37-9",
      N2_meltingPoint = 63.15,
      N2_normalBoilingPoint = 77.35,
      N2_criticalTemperature = 126.20,
      N2_criticalPressure = 33.98e5,
      N2_criticalMolarVolume = 90.10e-6,
      N2_acentricFactor = 0.037,
      N2_dipoleMoment = 0.0,
      N2_hasDipoleMoment = true,
			N2_hasIdealGasHeatCapacity = true,
      N2_hasCriticalData = true,
      N2_hasAcentricFactor = true;

// Константы для расчета свойств кислорода (О2)
const O2_MM = 0.0319988,
      O2_Hf = 0,
      O2_H0 = 271263.4223783392,
      O2_Tlimit = 1000,
      O2_alow = [-34255.6342,484.700097,1.119010961,0.00429388924,-6.83630052e-007,-2.0233727e-009,1.039040018e-012],
      O2_blow = [-3391.45487,18.4969947],
      O2_ahigh = [-1037939.022,2344.830282,1.819732036,0.001267847582,-2.188067988e-007,2.053719572e-011,-8.193467050000001e-016],
      O2_bhigh = [-16890.10929,17.38716506],
      O2_R = 259.8369938872708,

			O2_casRegistryNumber = "7782-44-7",
      O2_meltingPoint = 54.36,
      O2_normalBoilingPoint = 90.17,
      O2_criticalTemperature = 154.58,
      O2_criticalPressure = 50.43e5,
      O2_criticalMolarVolume = 73.37e-6,
      O2_acentricFactor = 0.022,
      O2_dipoleMoment = 0.0,
      O2_hasDipoleMoment = true,
      O2_hasIdealGasHeatCapacity = true,
      O2_hasCriticalData = true,
      O2_hasAcentricFactor = true;

// Константы для расчета свойств СО2
const CO2_MM = 0.0440095,
      CO2_Hf = -8941478.544405185,
      CO2_H0 = 212805.6215135368,
      CO2_Tlimit = 1000,
      CO2_alow = [49436.5054,-626.411601,5.30172524,0.002503813816,-2.127308728e-007,-7.68998878e-010,2.849677801e-013],
      CO2_blow = [-45281.9846,-7.04827944],
      CO2_ahigh = [117696.2419,-1788.791477,8.29152319,-9.22315678e-005,4.86367688e-009,-1.891053312e-012,6.330036589999999e-016],
      CO2_bhigh = [-39083.5059,-26.52669281],
      CO2_R = 188.9244822140674,

			CO2_casRegistryNumber = "124-38-9",
      CO2_meltingPoint = 216.58,
      CO2_normalBoilingPoint = -1.0,
      CO2_criticalTemperature = 304.12,
      CO2_criticalPressure = 73.74e5,
      CO2_criticalMolarVolume = 94.07e-6,
      CO2_acentricFactor = 0.225,
      CO2_dipoleMoment = 0.0,
      CO2_hasDipoleMoment = true,
      CO2_hasIdealGasHeatCapacity = true,
      CO2_hasCriticalData = true,
      CO2_hasAcentricFactor = true:

// Константы для расчета свойств Н2О
const H2O_MM = 0.01801528,
      H2O_Hf = -13423382.81725291,
      H2O_H0 = 549760.6476280135,
      H2O_Tlimit = 1000,
      H2O_alow = [-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012],
      H2O_blow = [-33039.7431,17.24205775],
      H2O_ahigh = [1034972.096,-2412.698562,4.64611078,0.002291998307,-6.836830479999999e-007,9.426468930000001e-011,-4.82238053e-015],
      H2O_bhigh = [-13842.86509,-7.97814851],
      H2O_R = 461.5233290850878,

			H2O_casRegistryNumber = "7732-18-5",
      H2O_meltingPoint = 273.15,
      H2O_normalBoilingPoint = 373.124,
      H2O_criticalTemperature = 647.096,
      H2O_criticalPressure = 220.64e5,
      H2O_criticalMolarVolume = 55.95e-6,
      H2O_acentricFactor = 0.344,
      H2O_dipoleMoment = 1.8,
      H2O_hasDipoleMoment = true,
      H2O_hasIdealGasHeatCapacity = true,
      H2O_hasCriticalData = true,
      H2O_hasAcentricFactor = true;

// Константы для расчета свойств аргона (Ar)
const Ar_MM = 0.039948,
      Ar_Hf = 0,
      Ar_H0 = 155137.3785921698,
      Ar_Tlimit = 1000,
      Ar_alow = [0,0,2.5,0,0,0,0],
      Ar_blow = [-745.375,4.37967491],
      Ar_ahigh = [20.10538475,-0.05992661069999999,2.500069401,-3.99214116e-008,1.20527214e-011,-1.819015576e-015,1.078576636e-019],
      Ar_bhigh = [-744.993961,4.37918011],
      Ar_R = 208.1323720837088,
			
			Ar_casRegistryNumber = "7440-37-1",
      Ar_meltingPoint = 83.80,
      Ar_normalBoilingPoint = 87.27,
      Ar_criticalTemperature = 150.86,
      Ar_criticalPressure = 48.98e5,
      Ar_criticalMolarVolume = 74.57e-6,
      Ar_acentricFactor = -0.002,
      Ar_dipoleMoment = 0.0,
      Ar_hasDipoleMoment = true,
      Ar_hasIdealGasHeatCapacity = true,
      Ar_hasCriticalData = true,
      Ar_hasAcentricFactor = true;  

// Константы для расчета свойств диоксида озота (NO2)
const NO2_MM = 0.0460055,
      NO2_Hf = 743237.6346306421,
      NO2_H0 = 221890.3174620426,
      NO2_Tlimit = 1000,
      NO2_alow = [-56420.3878,963.308572,-2.434510974,0.01927760886,-1.874559328e-005,9.145497730000001e-009,-1.777647635e-012],
      NO2_blow = [-1547.925037,40.6785121],
      NO2_ahigh = [721300.157,-3832.6152,11.13963285,-0.002238062246,6.54772343e-007,-7.6113359e-011,3.32836105e-015],
      NO2_bhigh = [25024.97403,-43.0513004],
      NO2_R = 180.7277825477389,

			NO2_casRegistryNumber = "10102-44-0",
      NO2_meltingPoint = 261.95,
      NO2_normalBoilingPoint = 294.0,
      NO2_criticalTemperature = 431.35,
      NO2_criticalPressure = 101.33e5,
      NO2_criticalMolarVolume = 82.5e-6,
      NO2_acentricFactor = 0.849,
      NO2_dipoleMoment = 0.32,
      NO2_hasDipoleMoment = true,
      NO2_hasIdealGasHeatCapacity = true,
      NO2_hasCriticalData = true,
      NO2_hasAcentricFactor = true;

// Константы для расчета свойств диоксида серы (SO2)
const SO2_MM = 0.0640638,
      SO2_Hf = -4633037.690552231,
      SO2_H0 = 164650.3485587805,
      SO2_Tlimit = 1000,
      SO2_alow = [-53108.4214,909.031167,-2.356891244,0.02204449885,-2.510781471e-005,1.446300484e-008,-3.36907094e-012],
      SO2_blow = [-41137.52080000001,40.45512519],
      SO2_ahigh = [-112764.0116,-825.226138,7.61617863,-0.000199932761,5.65563143e-008,-5.45431661e-012,2.918294102e-016],
      SO2_bhigh = [-33513.0869,-16.55776085],
      SO2_R = 129.7842463294403,

			SO2_casRegistryNumber = "7446-09-5",
      SO2_meltingPoint = 197.67,
      SO2_normalBoilingPoint = 263.13,
      SO2_criticalTemperature = 430.80,
      SO2_criticalPressure = 78.84e5,
      SO2_criticalMolarVolume = 122.00e-6,
      SO2_acentricFactor = 0.245,
      SO2_dipoleMoment = 1.6,
      SO2_hasDipoleMoment = true,
      SO2_hasIdealGasHeatCapacity = true,
      SO2_hasCriticalData = true,
      SO2_hasAcentricFactor = true;

// Функции для расчета энтальпии компонентов
// температура - [K], энтальпия - [Дж/кг]
function h_T(T:double, _R, _alow, _blow, _Tlimit, _ahigh, _bhigh, _H0, _Hf)
    if T < _Tlimit then
        h_T = _R*((-_alow[1] + T*(_blow[1] + _alow[2]*ln(T) + T*(1.*_alow[3] + T*(0.5*_alow[4] + T*(1/3*_alow[5] + T*(0.25*_alow[6] + 0.2*_alow[7]*T))))))/T) + _H0 - _Hf
    else   
        h_T = _R*((-_ahigh[1] + T*(_bhigh[1] + _ahigh[2]*ln(T) + T*(1.*_ahigh[3] + T*(0.5*_ahigh[4] + T*(1/3*_ahigh[5] + T*(0.25*_ahigh[6] + 0.2*_ahigh[7]*T))))))/T) + _H0 - _Hf;
end;
// векторная реализация h_T
function h_T_v(T:array, _R, _alow, _blow, _Tlimit, _ahigh, _bhigh, _H0, _Hf)
    n = cols(T)
		high = min(trunc(T / n#_Tlimit), n#1)
		low = abs(high - n#1)

    a1 = _alow[1] * low + _ahigh[1] * high
		b1 = _blow[1] * low + _bhigh[1] * high
		a2 = _alow[2] * low + _ahigh[2] * high
		a3 = _alow[3] * low + _ahigh[3] * high
		a4 = _alow[4] * low + _ahigh[4] * high
		a5 = _alow[5] * low + _ahigh[5] * high
		a6 = _alow[6] * low + _ahigh[6] * high
		a7 = _alow[7] * low + _ahigh[7] * high
		
		h_T_v = _R*((-a1 + T .* (b1 + a2 .* ln(T) + T .* (a3 + T .* (0.5 * a4 + T .* (1/3 * a5 + T .* (0.25 * a6 + (0.2 * a7) .*T))))))/T) + n#_H0 - n#_Hf
end;



function N2_h_T(T)
    N2_h_T = h_T(T, N2_R, N2_alow, N2_blow, N2_Tlimit,  N2_ahigh, N2_bhigh, N2_H0, N2_Hf)
end;
// векторная реализация N2_h_T
function N2_h_T_v(T)
    N2_h_T_v = h_T_v(T, N2_R, N2_alow, N2_blow, N2_Tlimit,  N2_ahigh, N2_bhigh, N2_H0, N2_Hf)
end;

function O2_h_T(T)
    O2_h_T = h_T(T, O2_R, O2_alow, O2_blow, O2_Tlimit,  O2_ahigh, O2_bhigh, O2_H0, O2_Hf)
end;
// векторная реализация O2_h_T
function O2_h_T_v(T)
    O2_h_T_v = h_T_v(T, O2_R, O2_alow, O2_blow, O2_Tlimit,  O2_ahigh, O2_bhigh, O2_H0, O2_Hf)
end;

function CO2_h_T(T)
    CO2_h_T = h_T(T, CO2_R, CO2_alow, CO2_blow, CO2_Tlimit,  CO2_ahigh, CO2_bhigh, CO2_H0, CO2_Hf)
end;
// векторная реализация CO2_h_T
function CO2_h_T_v(T)
    CO2_h_T_v = h_T_v(T, CO2_R, CO2_alow, CO2_blow, CO2_Tlimit,  CO2_ahigh, CO2_bhigh, CO2_H0, CO2_Hf)
end;

function H2O_h_T(T)
    H2O_h_T = h_T(T, H2O_R, H2O_alow, H2O_blow, H2O_Tlimit,  H2O_ahigh, H2O_bhigh, H2O_H0, H2O_Hf)
end;
// векторная реализация H2O_h_T
function H2O_h_T_v(T)
    H2O_h_T_v = h_T_v(T, H2O_R, H2O_alow, H2O_blow, H2O_Tlimit,  H2O_ahigh, H2O_bhigh, H2O_H0, H2O_Hf)
end;

function Ar_h_T(T)
    Ar_h_T = h_T(T, Ar_R, Ar_alow, Ar_blow, Ar_Tlimit,  Ar_ahigh, Ar_bhigh, Ar_H0, Ar_Hf)
end;
// векторная реализация Ar_h_T
function Ar_h_T_v(T)
    Ar_h_T_v = h_T_v(T, Ar_R, Ar_alow, Ar_blow, Ar_Tlimit,  Ar_ahigh, Ar_bhigh, Ar_H0, Ar_Hf)
end;

function NO2_h_T(T)
    NO2_h_T = h_T(T, NO2_R, NO2_alow, NO2_blow, NO2_Tlimit,  NO2_ahigh, NO2_bhigh, NO2_H0, NO2_Hf)
end;
// векторная реализация NO2_h_T
function NO2_h_T_v(T)
    NO2_h_T_v = h_T_v(T, NO2_R, NO2_alow, NO2_blow, NO2_Tlimit,  NO2_ahigh, NO2_bhigh, NO2_H0, NO2_Hf)
end;

function SO2_h_T(T)
    SO2_h_T = h_T(T, SO2_R, SO2_alow, SO2_blow, SO2_Tlimit,  SO2_ahigh, SO2_bhigh, SO2_H0, SO2_Hf)
end;
// векторная реализация SO2_h_T
function SO2_h_T_v(T)
    SO2_h_T_v = h_T_v(T, SO2_R, SO2_alow, SO2_blow, SO2_Tlimit,  SO2_ahigh, SO2_bhigh, SO2_H0, SO2_Hf)
end;

// Функция для расчета энтальпии смеси газов
// температура - [K], энтальпия - [Дж/кг]
// состав смеси: кислород (O2), диоксид углерода (CO2), вода (H2O), азот (N2), аргон (Ar), диоксид серы (SO2)
function exh_gas_h_T(T, X)
    h_comp = [O2_h_T(T), CO2_h_T(T), H2O_h_T(T), N2_h_T(T), Ar_h_T(T), SO2_h_T(T)];
    exh_gas_h_T = dot(h_comp, transp(X));
end;
// векторная реализация exh_gas_h_T
function exh_gas_h_T_v(T, X)
    h_comp = [O2_h_T_v(T), CO2_h_T_v(T), H2O_h_T_v(T), N2_h_T_v(T), Ar_h_T_v(T), SO2_h_T_v(T)];
		exh_gas_h_T_v = transp(transp(h_comp) * transp(X))[1] 
end;

// Функции температуры смеси от ее энтельпии
// на основе разных методов численного решения нелинейного уравнения
// температура - [K], энтальпия - [Дж/кг]
// Метод секущей
function exh_gas_h_T_newt(h, X, T0)

    T1 = T0 + 10;
    i = 0;
    while (abs(T1 - T0) > 0.01) and (i < 10) do
// Принята точность 0.01, максимальное число итераций 10

        begin;
        
        f_x_0 = exh_gas_h_T(T0, X) - h;
        f_x_1 = exh_gas_h_T(T1, X) - h;
        delta_f = f_x_0 - f_x_1;
	      if abs(delta_f) < 0.0001 then delta_f = 0.0001 * sign(delta_f);

        T2 = T1 - (T0 - T1) * f_x_1 / delta_f ;
       
        T0 = T1;
        T1 = T2;

        i = i + 1;
        
        end;
    
    exh_gas_h_T_newt = T1;

end;

// Функция для расчета плотности компонента
// плотность - [кг/м3]
// температура - [K], давление - [Па]
function d_pT(p, T, _R)
    d_pT = p / (_R * T)
end;
// векторная реализация d_pT
function d_pT_v(p, T, _R)
    d_pT_v = p ./ (_R * T)
end;

function N2_d_pT(p, T)
    N2_d_pT = d_pT(p, T, N2_R)
end;
// векторная реализация N2_d_pT_v
function N2_d_pT_v(p, T)
    N2_d_pT_v = d_pT_v(p, T, N2_R)
end;

function O2_d_pT(p, T)
    O2_d_pT = d_pT(p, T, O2_R)
end;
// векторная реализация O2_d_pT
function O2_d_pT_v(p, T)
    O2_d_pT_v = d_pT_v(p, T, O2_R)
end;

function CO2_d_pT(p, T)
    CO2_d_pT = d_pT(p, T, CO2_R)
end;
// векторная реализация CO2_d_pT
function CO2_d_pT_v(p, T)
    CO2_d_pT_v = d_pT_v(p, T, CO2_R)
end;

function H2O_d_pT(p, T)
    H2O_d_pT = d_pT(p, T, H2O_R)
end;
// векторная реализация H2O_d_pT
function H2O_d_pT_v(p, T)
    H2O_d_pT_v = d_pT_v(p, T, H2O_R)
end;

function Ar_d_pT(p, T)
    Ar_d_pT = d_pT(p, T, Ar_R)
end;
// векторная реализация Ar_d_pT
function Ar_d_pT_v(p, T)
    Ar_d_pT_v = d_pT_v(p, T, Ar_R)
end;

function NO2_d_pT(p, T)
    NO2_d_pT = d_pT(p, T, NO2_R)
end;
// векторная реализация NO2_d_pT
function NO2_d_pT_v(p, T)
    NO2_d_pT_v = d_pT_v(p, T, NO2_R)
end;

function SO2_d_pT(p, T)
    SO2_d_pT = d_pT(p, T, SO2_R)
end;
// векторная реализация SO2_d_pT
function SO2_d_pT_v(p, T)
    SO2_d_pT_v = d_pT_v(p, T, SO2_R)
end;

// Функция для расчета плотности смеси газов
// плотность - [кг/м3]
// температура - [K], давление - [Па]
// состав смеси: кислород (O2), диоксид углерода (CO2), вода (H2O), азот (N2), аргон (Ar), диоксид серы (SO2)
function exh_gas_d_pT(p, T, X)
    d_comp = [O2_d_pT(p, T), CO2_d_pT(p, T), H2O_d_pT(p, T), N2_d_pT(p, T), Ar_d_pT(p, T), SO2_d_pT(p, T)];
    exh_gas_d_pT = dot(d_comp, transp(X));
end;
// векторная реализация exh_gas_d_pT
function exh_gas_d_pT_v(p, T, X)
    d_comp = [O2_d_pT_v(p, T), CO2_d_pT_v(p, T), H2O_d_pT_v(p, T), N2_d_pT_v(p, T), Ar_d_pT_v(p, T), SO2_d_pT_v(p, T)];
    exh_gas_d_pT_v = transp(transp(d_comp) * transp(X))[1] ;
end;


// Функция расчета мольных долей по массовым долям
function massToMoleFractions(X)
    MMX = [O2_MM, CO2_MM, H2O_MM, N2_MM, Ar_MM, SO2_MM];
		invMMX = (cols(MMX)#1) ./ MMX;
		Mmix = 1 / dot(invMMX, transp(x)); // Мольная масса смеси
    massToMoleFractions = (cols(MMX)#Mmix) .* X ./ MMX; 
end;

// Функция для расчета динамической вязкости газов при низком давлении
// динамическая вязкость - [Па*с]
// температура газа - [К], критическая температура газа - [K]
// молярная масса - [кг/моль], критический молярный объем - [м3/моль]
function dynamicViscosityLowPressure(T, Tc, M, Vc, w, mu)
    Const1_SI = 40.785*10^(-9.5);
		Const2_SI = 131.3/1000.0;
		mur = Const2_SI*mu/sqrt(Vc*Tc);
		Fc = 1 - 0.2756*w + 0.059035*mur^4;

    Tstar = 1.2593*T/Tc;
    Ov = 1.16145*Tstar^(-0.14874) + 0.52487*exp(-0.7732*Tstar) + 2.16178*exp(-2.43787*Tstar);
    dynamicViscosityLowPressure = Const1_SI*Fc*sqrt(M*T)/(Vc^(2/3)*Ov); 
end;
// векторная реализация dynamicViscosityLowPressure
function dynamicViscosityLowPressure_v(T, Tc, M, Vc, w, mu)
    Const1_SI = 40.785*10^(-9.5);
		Const2_SI = 131.3/1000.0;
		mur = Const2_SI*mu/sqrt(Vc*Tc);
		Fc = 1 - 0.2756*w + 0.059035*mur^4;

    Tstar = 1.2593*T/Tc;
    Ov = 1.16145*(Tstar .^ (-0.14874)) + 0.52487*exp(-0.7732*Tstar) + 2.16178*exp(-2.43787*Tstar);
    dynamicViscosityLowPressure_v = (Const1_SI*Fc*sqrt(M*T)) ./ (Vc^(2/3)*Ov);
end;


function N2_dynamicViscosityLowPressure(T) 
    N2_dynamicViscosityLowPressure = dynamicViscosityLowPressure(T, N2_criticalTemperature, N2_MM, N2_criticalMolarVolume, N2_acentricFactor, N2_dipoleMoment); 
end;
// векторная реализация N2_dynamicViscosityLowPressure
function N2_dynamicViscosityLowPressure_v(T) 
    N2_dynamicViscosityLowPressure_v = dynamicViscosityLowPressure_v(T, N2_criticalTemperature, N2_MM, N2_criticalMolarVolume, N2_acentricFactor, N2_dipoleMoment); 
end;

function O2_dynamicViscosityLowPressure(T) 
    O2_dynamicViscosityLowPressure = dynamicViscosityLowPressure(T, O2_criticalTemperature, O2_MM, O2_criticalMolarVolume, O2_acentricFactor, O2_dipoleMoment); 
end;
// векторная реализация O2_dynamicViscosityLowPressure
function O2_dynamicViscosityLowPressure_v(T) 
    O2_dynamicViscosityLowPressure_v = dynamicViscosityLowPressure_v(T, O2_criticalTemperature, O2_MM, O2_criticalMolarVolume, O2_acentricFactor, O2_dipoleMoment); 
end;

function CO2_dynamicViscosityLowPressure(T) 
    CO2_dynamicViscosityLowPressure = dynamicViscosityLowPressure(T, CO2_criticalTemperature, CO2_MM, CO2_criticalMolarVolume, CO2_acentricFactor, CO2_dipoleMoment); 
end;
// векторная реализация CO2_dynamicViscosityLowPressure
function CO2_dynamicViscosityLowPressure_v(T) 
    CO2_dynamicViscosityLowPressure_v = dynamicViscosityLowPressure_v(T, CO2_criticalTemperature, CO2_MM, CO2_criticalMolarVolume, CO2_acentricFactor, CO2_dipoleMoment); 
end;

function H2O_dynamicViscosityLowPressure(T) 
    H2O_dynamicViscosityLowPressure = dynamicViscosityLowPressure(T, H2O_criticalTemperature, H2O_MM, H2O_criticalMolarVolume, H2O_acentricFactor, H2O_dipoleMoment); 
end;
// векторная реализация H2O_dynamicViscosityLowPressure
function H2O_dynamicViscosityLowPressure_v(T) 
    H2O_dynamicViscosityLowPressure_v = dynamicViscosityLowPressure_v(T, H2O_criticalTemperature, H2O_MM, H2O_criticalMolarVolume, H2O_acentricFactor, H2O_dipoleMoment); 
end;

function Ar_dynamicViscosityLowPressure(T) 
    Ar_dynamicViscosityLowPressure = dynamicViscosityLowPressure(T, Ar_criticalTemperature, Ar_MM, Ar_criticalMolarVolume, Ar_acentricFactor, Ar_dipoleMoment); 
end;
// векторная реализация Ar_dynamicViscosityLowPressure
function Ar_dynamicViscosityLowPressure_v(T) 
    Ar_dynamicViscosityLowPressure_v = dynamicViscosityLowPressure_v(T, Ar_criticalTemperature, Ar_MM, Ar_criticalMolarVolume, Ar_acentricFactor, Ar_dipoleMoment); 
end;

function NO2_dynamicViscosityLowPressure(T) 
    NO2_dynamicViscosityLowPressure = dynamicViscosityLowPressure(T, NO2_criticalTemperature, NO2_MM, NO2_criticalMolarVolume, NO2_acentricFactor, NO2_dipoleMoment); 
end;
// векторная реализация NO2_dynamicViscosityLowPressure
function NO2_dynamicViscosityLowPressure_v(T) 
    NO2_dynamicViscosityLowPressure_v = dynamicViscosityLowPressure_v(T, NO2_criticalTemperature, NO2_MM, NO2_criticalMolarVolume, NO2_acentricFactor, NO2_dipoleMoment); 
end;

function SO2_dynamicViscosityLowPressure(T) 
    SO2_dynamicViscosityLowPressure = dynamicViscosityLowPressure(T, SO2_criticalTemperature, SO2_MM, SO2_criticalMolarVolume, SO2_acentricFactor, SO2_dipoleMoment); 
end;
// векторная реализация SO2_dynamicViscosityLowPressure
function SO2_dynamicViscosityLowPressure_v(T) 
    SO2_dynamicViscosityLowPressure_v = dynamicViscosityLowPressure_v(T, SO2_criticalTemperature, SO2_MM, SO2_criticalMolarVolume, SO2_acentricFactor, SO2_dipoleMoment); 
end;

function gasMixtureViscosity(yi, M, eta)
    fi= matrix(cols(yi), cols(yi));
		for (i=1,cols(yi))
		begin
		    for (j=1,cols(yi))
	      begin
		        if i = 1 then
						    fi[i,j] = (1 + (eta[i]/eta[j])^(1/2)*(M[j]/M[i])^(1/4))^2/(8*(1 + M[i]/M[j]))^(1/2)
					  else
						begin					    
						    if j < i then
								    fi[i,j] = eta[i]/eta[j]*M[j]/M[i]*fi[j,i]
                else
								    fi[i,j] = (1 + (eta[i]/eta[j])^(1/2)*(M[j]/M[i])^(1/4))^2/(8*(1 + M[i]/M[j]))^(1/2);
						end; 
		    end;
    end;

    etam = 0;
		for (i=1,cols(yi))
		begin
		    sum_1 = 0;
		    for (j=1, cols(yi))
		    begin
				    sum_1 = sum_1 + yi[j]*fi[i,j];
		    end;
				etam = etam + yi[i]*eta[i]/sum_1;
    end;
 
    gasMixtureViscosity = etam; 
end;

function dynamicViscosity(T, X)
    MMX = [O2_MM, CO2_MM, H2O_MM, N2_MM, Ar_MM, SO2_MM];
		etaX = 6#0;

		etaX[1] =  O2_dynamicViscosityLowPressure(T);
		etaX[2] =  CO2_dynamicViscosityLowPressure(T);
		etaX[3] =  H2O_dynamicViscosityLowPressure(T);
		etaX[4] =  N2_dynamicViscosityLowPressure(T);
		etaX[5] =  Ar_dynamicViscosityLowPressure(T);
		etaX[6] =  SO2_dynamicViscosityLowPressure(T);
  
    dynamicViscosity = gasMixtureViscosity(massToMoleFractions(X), MMX, etaX); 
end;
// векторная реализация dynamicViscosity
function dynamicViscosity_v(T, X)
    MMX = [O2_MM, CO2_MM, H2O_MM, N2_MM, Ar_MM, SO2_MM];
		
		etaX = 6#(cols(T)#0);
		etaX[1] =  O2_dynamicViscosityLowPressure_v(T);
		etaX[2] =  CO2_dynamicViscosityLowPressure_v(T);
		etaX[3] =  H2O_dynamicViscosityLowPressure_v(T);
		etaX[4] =  N2_dynamicViscosityLowPressure_v(T);
		etaX[5] =  Ar_dynamicViscosityLowPressure_v(T);
		etaX[6] =  SO2_dynamicViscosityLowPressure_v(T);
		etaX = transp(etaX);
		
		yi = massToMoleFractions(X);
  
    dynamicViscosity_temp = []
		for (i=1,cols(T))
		begin
	      dynamicViscosity_temp = dynamicViscosity_temp & gasMixtureViscosity(yi, MMX, etaX[i]);
		end;
    
		dynamicViscosity_v = dynamicViscosity_temp;
end;

// Функция для расчета теплоемкости по температуре [K]
// теплоемкость - [Дж/кг/К]
function cp_T(T, R, Tlimit, alow, ahigh) 
    if T < Tlimit then
		    cp_T = R*(1/(T*T)*(alow[1] + T*(alow[2] + T*(1.*alow[3] + T*(alow[4] + T*(alow[5] + T*(alow[6] + alow[7]*T)))))))
		else
		    cp_T = R*(1/(T*T)*(ahigh[1] + T*(ahigh[2] + T*(1.*ahigh[3] + T*(ahigh[4] + T*(ahigh[5] + T*(ahigh[6] + ahigh[7]*T))))))); 
end;
// векторная реализация cp_T
function cp_T_v(T, R, Tlimit, alow, ahigh)
    n = cols(T)
		high = min(trunc(T / n#Tlimit), n#1)
		low = abs(high - n#1)
 
 	  a1 = alow[1] * low + ahigh[1] * high
		a2 = alow[2] * low + ahigh[2] * high
		a3 = alow[3] * low + ahigh[3] * high
		a4 = alow[4] * low + ahigh[4] * high
		a5 = alow[5] * low + ahigh[5] * high
		a6 = alow[6] * low + ahigh[6] * high
		a7 = alow[7] * low + ahigh[7] * high
 
    cp_T_v = R * (1/(T .* T) .* (a1 + T .* (a2 + T .* (a3 + T .* (a4 + T .* (a5 + T .* (a6 + a7 .* T)))))))
end;


function O2_cp_T(T) 
    O2_cp_T = cp_T(T, O2_R, O2_Tlimit, O2_alow, O2_ahigh);
end;
// векторная реализация O2_cp_T
function O2_cp_T_v(T) 
    O2_cp_T_v = cp_T_v(T, O2_R, O2_Tlimit, O2_alow, O2_ahigh);
end;

function CO2_cp_T(T) 
    CO2_cp_T = cp_T(T, CO2_R, CO2_Tlimit, CO2_alow, CO2_ahigh);
end;
// векторная реализация CO2_cp_T
function CO2_cp_T_v(T) 
    CO2_cp_T_v = cp_T_v(T, CO2_R, CO2_Tlimit, CO2_alow, CO2_ahigh);
end;

function H2O_cp_T(T) 
    H2O_cp_T = cp_T(T, H2O_R, H2O_Tlimit, H2O_alow, H2O_ahigh);
end;
// векторная реализация H2O_cp_T
function H2O_cp_T_v(T) 
    H2O_cp_T_v = cp_T_v(T, H2O_R, H2O_Tlimit, H2O_alow, H2O_ahigh);
end;

function N2_cp_T(T) 
    N2_cp_T = cp_T(T, N2_R, N2_Tlimit, N2_alow, N2_ahigh);
end;
// векторная реализация N2_cp_T
function N2_cp_T_v(T) 
    N2_cp_T_v = cp_T_v(T, N2_R, N2_Tlimit, N2_alow, N2_ahigh);
end;

function Ar_cp_T(T) 
    Ar_cp_T = cp_T(T, Ar_R, Ar_Tlimit, Ar_alow, Ar_ahigh);
end;
// векторная реализация Ar_cp_T
function Ar_cp_T_v(T) 
    Ar_cp_T_v = cp_T_v(T, Ar_R, Ar_Tlimit, Ar_alow, Ar_ahigh);
end;

function SO2_cp_T(T) 
    SO2_cp_T = cp_T(T, SO2_R, SO2_Tlimit, SO2_alow, SO2_ahigh);
end;
// векторная реализация SO2_cp_T
function SO2_cp_T_v(T) 
    SO2_cp_T_v = cp_T_v(T, SO2_R, SO2_Tlimit, SO2_alow, SO2_ahigh);
end;

function exh_gas_cp_T(T, X)
    cp_comp = [O2_cp_T(T), CO2_cp_T(T), H2O_cp_T(T), N2_cp_T(T), Ar_cp_T(T), SO2_cp_T(T)];
    exh_gas_cp_T = dot(cp_comp, transp(X)); 
end;
// векторная реализация exh_gas_cp_T
function exh_gas_cp_T_v(T, X)
    cp_comp = [O2_cp_T_v(T), CO2_cp_T_v(T), H2O_cp_T_v(T), N2_cp_T_v(T), Ar_cp_T_v(T), SO2_cp_T_v(T)];
    exh_gas_cp_T_v = transp(transp(cp_comp) * transp(X))[1]; 
end;


// Функция для расчета теплопроводности [Вт/м/К]
// Thermal conductivity of polyatomic gases (Eucken and Modified Eucken correlation)
function thermalConductivityEstimate(cp, eta, method:Integer, R) 
    if method = 1 then
		    thermalConductivityEstimate = eta*(Cp - R + (9/4)*R)
    else
		    thermalConductivityEstimate = eta*(Cp - R)*(1.32 + 1.77/((Cp/R) - 1.0)); 
end;
// векторная реализация thermalConductivityEstimate
function thermalConductivityEstimate_v(cp, eta, method:Integer, R)
    n = cols(eta) 
    if method = 1 then
		    thermalConductivityEstimate_v = eta .* (Cp - n#(R - (9/4)*R))
    else
		    thermalConductivityEstimate_v = eta .* (Cp - n#R)*(n#1.32 + 1.77/((Cp/R) - n#1.0)); 
end;

function O2_thermalConductivityEstimate(cp, eta, method:Integer) 
    O2_thermalConductivityEstimate = thermalConductivityEstimate(cp, eta, method, O2_R); 
end;
// векторная реализация O2_thermalConductivityEstimate
function O2_thermalConductivityEstimate_v(cp, eta, method:Integer) 
    O2_thermalConductivityEstimate_v = thermalConductivityEstimate_v(cp, eta, method, O2_R); 
end;

function CO2_thermalConductivityEstimate(cp, eta, method:Integer) 
    CO2_thermalConductivityEstimate = thermalConductivityEstimate(cp, eta, method, CO2_R); 
end;
// векторная реализация CO2_thermalConductivityEstimate
function CO2_thermalConductivityEstimate_v(cp, eta, method:Integer) 
    CO2_thermalConductivityEstimate_v = thermalConductivityEstimate_v(cp, eta, method, CO2_R); 
end;

function H2O_thermalConductivityEstimate(cp, eta, method:Integer) 
    H2O_thermalConductivityEstimate = thermalConductivityEstimate(cp, eta, method, H2O_R); 
end;
// векторная реализация H2O_thermalConductivityEstimate
function H2O_thermalConductivityEstimate_v(cp, eta, method:Integer) 
    H2O_thermalConductivityEstimate_v = thermalConductivityEstimate_v(cp, eta, method, H2O_R); 
end;

function N2_thermalConductivityEstimate(cp, eta, method:Integer) 
    N2_thermalConductivityEstimate = thermalConductivityEstimate(cp, eta, method, N2_R); 
end;
// векторная реализация N2_thermalConductivityEstimate
function N2_thermalConductivityEstimate_v(cp, eta, method:Integer) 
    N2_thermalConductivityEstimate_v = thermalConductivityEstimate_v(cp, eta, method, N2_R); 
end;

function Ar_thermalConductivityEstimate(cp, eta, method:Integer) 
    Ar_thermalConductivityEstimate = thermalConductivityEstimate(cp, eta, method, Ar_R); 
end;
// векторная реализация Ar_thermalConductivityEstimate
function Ar_thermalConductivityEstimate_v(cp, eta, method:Integer) 
    Ar_thermalConductivityEstimate_v = thermalConductivityEstimate_v(cp, eta, method, Ar_R); 
end;

function SO2_thermalConductivityEstimate(cp, eta, method:Integer) 
    SO2_thermalConductivityEstimate = thermalConductivityEstimate(cp, eta, method, SO2_R); 
end;
// векторная реализация SO2_thermalConductivityEstimate
function SO2_thermalConductivityEstimate_v(cp, eta, method:Integer) 
    SO2_thermalConductivityEstimate_v = thermalConductivityEstimate_v(cp, eta, method, SO2_R); 
end;

// Функция для расчета теплопроводности газовой смеси низкого давления
// y - мольные доли компонентов (массив);
// T - температура [K];
// Tc - критические температуры компонентов (массив) [K];
// Pc - критические давления компонентов (массив) [Па];
// M - мольный вес компонентов (массив) г/моль;
// lambda - теплопроводность компонентов (массив);

function lowPressureThermalConductivity(y, T, Tc, Pc, M, lambda)
    
		gam =  cols(y)#0;
		Tr = cols(y)#0;
    for (i=1,cols(y))
		    begin
        gam[i] = 210*(Tc[i]*M[i]^3/Pc[i]^4)^(1/6);
        Tr[i] = T/Tc[i];
				end;
    A = matrix(cols(y), cols(y));
		for (i=1,cols(y))
		    for (j=1,cols(y))
				    A[i,j] = (1 + (gam[j]*(exp(0.0464*Tr[i]) - exp(-0.2412*Tr[i]))/ (gam[i]*(exp(0.0464*Tr[j]) - exp(-0.2412*Tr[j]))))^(1/2)*(M[i]/M[j])^(1/4))^2/ (8*(1 + M[i]/M[j]))^(1/2);


		lambda_g = 0;
		for (i=1,cols(y))
		    begin
				sum1 = 0;
		    for (j=1,cols(y))
				    begin
		        sum1 = sum1 + y[j]*A[i,j];
						end;
        lambda_g = lambda_g + y[i]*lambda[i]/sum1;				
				end;

		lowPressureThermalConductivity = lambda_g; 
end;

// Функция для расчета теплопроводности газовой смеси [Вт/м/К]
// T - температура [K];
// X - массовый состав смеси;

function thermalConductivity(T, X, method:Integer)
 	  etaX = cols(X)#0;
		etaX[1] =  O2_dynamicViscosityLowPressure(T);
		etaX[2] =  CO2_dynamicViscosityLowPressure(T);
		etaX[3] =  H2O_dynamicViscosityLowPressure(T);
		etaX[4] =  N2_dynamicViscosityLowPressure(T);
		etaX[5] =  Ar_dynamicViscosityLowPressure(T);
		etaX[6] =  SO2_dynamicViscosityLowPressure(T);

		cpX = cols(X)#0;
		cpX[1] =  O2_cp_T(T);
		cpX[2] =  CO2_cp_T(T);
		cpX[3] =  H2O_cp_T(T);
		cpX[4] =  N2_cp_T(T);
		cpX[5] =  Ar_cp_T(T);
		cpX[6] =  SO2_cp_T(T);

		lambdaX = cols(X)#0;
		lambdaX[1] = O2_thermalConductivityEstimate(cpX[1], etaX[1], method);
		lambdaX[2] = CO2_thermalConductivityEstimate(cpX[2], etaX[2], method);
		lambdaX[3] = H2O_thermalConductivityEstimate(cpX[3], etaX[3], method);
		lambdaX[4] = N2_thermalConductivityEstimate(cpX[4], etaX[4], method);
		lambdaX[5] = Ar_thermalConductivityEstimate(cpX[5], etaX[5], method);
		lambdaX[6] = SO2_thermalConductivityEstimate(cpX[6], etaX[6], method);

		TcX = cols(X)#0;
		TcX[1] = O2_criticalTemperature;
		TcX[2] = CO2_criticalTemperature;
		TcX[3] = H2O_criticalTemperature;
		TcX[4] = N2_criticalTemperature;
		TcX[5] = Ar_criticalTemperature;
		TcX[6] = SO2_criticalTemperature;

		PcX = cols(X)#0;
		PcX[1] = O2_criticalPressure;
		PcX[2] = CO2_criticalPressure;
		PcX[3] = H2O_criticalPressure;
		PcX[4] = N2_criticalPressure;
		PcX[5] = Ar_criticalPressure;
		PcX[6] = SO2_criticalPressure;

		MX = cols(X)#0;
		MX[1] = O2_MM;
		MX[2] = CO2_MM;
		MX[3] = H2O_MM;
		MX[4] = N2_MM;
		MX[5] = Ar_MM;
		MX[6] = SO2_MM;

    thermalConductivity = lowPressureThermalConductivity(massToMoleFractions(X), T, TcX, PcX, MX, lambdaX); 
end;
// векторная реализация thermalConductivity
function thermalConductivity_v(T, X, method:Integer)
	  n = cols(T)
		
		etaX = 6#(n#0);
		etaX[1] =  O2_dynamicViscosityLowPressure_v(T);
		etaX[2] =  CO2_dynamicViscosityLowPressure_v(T);
		etaX[3] =  H2O_dynamicViscosityLowPressure_v(T);
		etaX[4] =  N2_dynamicViscosityLowPressure_v(T);
		etaX[5] =  Ar_dynamicViscosityLowPressure_v(T);
		etaX[6] =  SO2_dynamicViscosityLowPressure_v(T);

		cpX = 6#(n#0);
		cpX[1] =  O2_cp_T_v(T);
		cpX[2] =  CO2_cp_T_v(T);
		cpX[3] =  H2O_cp_T_v(T);
		cpX[4] =  N2_cp_T_v(T);
		cpX[5] =  Ar_cp_T_v(T);
		cpX[6] =  SO2_cp_T_v(T);

		lambdaX = 6#(n#0);
		lambdaX[1] = O2_thermalConductivityEstimate_v(cpX[1], etaX[1], method);
		lambdaX[2] = CO2_thermalConductivityEstimate_v(cpX[2], etaX[2], method);
		lambdaX[3] = H2O_thermalConductivityEstimate_v(cpX[3], etaX[3], method);
		lambdaX[4] = N2_thermalConductivityEstimate_v(cpX[4], etaX[4], method);
		lambdaX[5] = Ar_thermalConductivityEstimate_v(cpX[5], etaX[5], method);
		lambdaX[6] = SO2_thermalConductivityEstimate_v(cpX[6], etaX[6], method);
		lambdaX = transp(lambdaX);

		TcX = cols(X)#0;
		TcX[1] = O2_criticalTemperature;
		TcX[2] = CO2_criticalTemperature;
		TcX[3] = H2O_criticalTemperature;
		TcX[4] = N2_criticalTemperature;
		TcX[5] = Ar_criticalTemperature;
		TcX[6] = SO2_criticalTemperature;

		PcX = cols(X)#0;
		PcX[1] = O2_criticalPressure;
		PcX[2] = CO2_criticalPressure;
		PcX[3] = H2O_criticalPressure;
		PcX[4] = N2_criticalPressure;
		PcX[5] = Ar_criticalPressure;
		PcX[6] = SO2_criticalPressure;

		MX = cols(X)#0;
		MX[1] = O2_MM;
		MX[2] = CO2_MM;
		MX[3] = H2O_MM;
		MX[4] = N2_MM;
		MX[5] = Ar_MM;
		MX[6] = SO2_MM;
		
		yi = massToMoleFractions(X);

    thermalConductivity_temp = [];
		for (i=1,cols(T))
		begin
		    thermalConductivity_temp = thermalConductivity_temp & lowPressureThermalConductivity(yi, T[i], TcX, PcX, MX, lambdaX[i])
		end;
		
		
    thermalConductivity_v = thermalConductivity_temp; 
end;

{
// Тестирование ф-ий
test_val_1 = [1,3,8,21,4,6,2,79,2,4];

test_val_2 = min(trunc(test_val_1 / 10#10), 10#1);

test_val_3 = N2_h_T_v([100+273.15, 1000.1])

test_val_4 = N2_h_T(1000.1)
test_val_5 = N2_h_T(100+273.15)

test_X = [0, 0.1, 0, 0.7, 0.2, 0]

test_val_6 = exh_gas_h_T(800, test_X)
test_val_7 = exh_gas_h_T_v([800, 900], test_X)

test_val_8 = N2_d_pT(1e5, 900)
test_val_9 = N2_d_pT_v(2#1e5, [800, 900])

test_val_10 = exh_gas_d_pT(1e5, 800, test_X)
test_val_11 = exh_gas_d_pT_v(2#1e5, [800, 900], test_X)

test_val_12 = N2_dynamicViscosityLowPressure(900)
test_val_13 = N2_dynamicViscosityLowPressure_v([900, 1000])

test_val_14 = dynamicViscosity(900, test_X)
test_val_15 = dynamicViscosity_v([900, 950], test_X)

test_val_16 = O2_cp_T(900)
test_val_17 = O2_cp_T_v([900, 950])

test_val_18 = exh_gas_cp_T(900, test_X)
test_val_19 = exh_gas_cp_T_v([900, 950], test_X)

test_val_20 = 1 / [3,4,5]
test_val_21 = [2,3,4] / 2

test_val_22 = O2_thermalConductivityEstimate(1073.8, 3.8e-5, 1)
test_val_23 = O2_thermalConductivityEstimate_v([1073.8, 2000], [3.8e-5, 3.9e-5], 1)

test_val_24 = O2_thermalConductivityEstimate(1073.8, 3.8e-5, 2)
test_val_25 = O2_thermalConductivityEstimate_v([1073.8, 2000], [3.8e-5, 3.9e-5], 2)

test_val_26 = thermalConductivity(900, test_X, 2)
test_val_27 = thermalConductivity_v([900, 950], test_X, 2)


seterrorstr("Тестирование функций", 0);
T1 = 500;
X = [0, 0.1, 0, 0.7, 0.2, 0];
seterrorstr("Плотность смеси газов при атмосферном давлении и " + T1 + "°С: " + exh_gas_d_pT(1.013e5, T1+273.15, X), 0);
seterrorstr("Динамическая вязкость O2 при " + T1 + "°С: " + O2_dynamicViscosityLowPressure(T1+273.15), 0);
seterrorstr("Динамическая вязкость CO2 при " + T1 + "°С: " + CO2_dynamicViscosityLowPressure(T1+273.15), 0);
seterrorstr("Динамическая вязкость H2O при " + T1 + "°С: " + H2O_dynamicViscosityLowPressure(T1+273.15), 0);
seterrorstr("Динамическая вязкость N2 при " + T1 + "°С: " + N2_dynamicViscosityLowPressure(T1+273.15), 0);
seterrorstr("Динамическая вязкость Ar при " + T1 + "°С: " + Ar_dynamicViscosityLowPressure(T1+273.15), 0);
seterrorstr("Динамическая вязкость SO2 при " + T1 + "°С: " + SO2_dynamicViscosityLowPressure(T1+273.15), 0);
seterrorstr("Мольные доли компонентов: " + massToMoleFractions(X), 0);
seterrorstr("Динамическая вязкость смеси при " + T1 + "°С: " + dynamicViscosity(T1+273.15, X), 0);
seterrorstr("Теплоемкость О2 при " + T1 + "°С: " + O2_cp_T(T1+273.15), 0);
seterrorstr("Теплоемкость CО2 при " + T1 + "°С: " + CO2_cp_T(T1+273.15), 0);
seterrorstr("Теплоемкость H2O при " + T1 + "°С: " + H2O_cp_T(T1+273.15), 0);
seterrorstr("Теплоемкость N2 при " + T1 + "°С: " + N2_cp_T(T1+273.15), 0);
seterrorstr("Теплоемкость Ar при " + T1 + "°С: " + Ar_cp_T(T1+273.15), 0);
seterrorstr("Теплоемкость SO2 при " + T1 + "°С: " + SO2_cp_T(T1+273.15), 0);
seterrorstr("Теплоемкость смеси при " + T1 + "°С: " + exh_gas_cp_t(T1+273.15, X), 0);
seterrorstr("Теплопроводность О2 при " + T1 + "°С (метод 1): " + O2_thermalConductivityEstimate(O2_cp_T(T1+273.15), O2_dynamicViscosityLowPressure(T1+273.15), 1), 0);
seterrorstr("Теплопроводность О2 при " + T1 + "°С (метод 2): " + O2_thermalConductivityEstimate(O2_cp_T(T1+273.15), O2_dynamicViscosityLowPressure(T1+273.15), 2), 0);
seterrorstr("Теплопроводность CО2 при " + T1 + "°С (метод 1): " + CO2_thermalConductivityEstimate(CO2_cp_T(T1+273.15), CO2_dynamicViscosityLowPressure(T1+273.15), 1), 0);
seterrorstr("Теплопроводность CО2 при " + T1 + "°С (метод 2): " + CO2_thermalConductivityEstimate(CO2_cp_T(T1+273.15), CO2_dynamicViscosityLowPressure(T1+273.15), 2), 0);
seterrorstr("Теплопроводность смеси при " + T1 + "°С: " + thermalConductivity(T1+273.15, X, 1), 0);
}